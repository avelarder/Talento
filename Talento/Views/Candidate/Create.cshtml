@model Talento.Models.CreateCandidateViewModel
@{ViewBag.Title = "Attaching a new Profile to " + @Model.Position_Name;
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";}

<span style="font-size:18px;">@ViewBag.Title</span>

<form id="formnewprofile" action="/Candidate/Create/" method="post">
    <input name="Position_Id" id="Position_Id" value="@Model.Position_Id" type="hidden" />
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group col-md-8 pmd-textfield pmd-textfield-floating-label">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control"} })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-8 pmd-textfield pmd-textfield-floating-label">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-8 pmd-textfield pmd-textfield-floating-label">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-8 pmd-textfield pmd-textfield-floating-label">
            @Html.LabelFor(model => model.Competencies, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Competencies, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Competencies, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-8">
            @Html.LabelFor(model => model.IsTcsEmployee, htmlAttributes: new { @class = "control-label" })
            <br />
            <br />
            <label class="switch">
                <input type="checkbox" onchange="switchIsEmployee()">
                <div class="slider round"></div>
            </label>
            <div style="visibility:hidden">
                @Html.CheckBoxFor(model => model.IsTcsEmployee, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.IsTcsEmployee, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-8 pmd-textfield pmd-textfield-floating-label">
            <label for="Files" class="col-md-2 col-form-label">Files</label>
            @Html.Action("Index", "File", null)
            <span class="field-validation-valid text-danger" data-valmsg-for="Files" data-valmsg-replace="true"></span>
        </div>
        <div class="form-group col-md-8">
            <div style="float:right">
                <input type="button"  id="buttonnewprofile" value="Create" class="btn pmd-btn-flat pmd-ripple-effect btn-primary" />
                @Html.ActionLink("Back to List", "Details", "Positions", new { id = Model.Position_Id }, new { @class = "btn pmd-btn-flat pmd-ripple-effect btn-primary" })
            </div>
            <br />
            @Html.ActionLink("Back to Dashboard", "Index", "Dashboard", null, null)
        </div>
    </div>
</form>
<br />

<style>
    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        /* Hide default HTML checkbox */
        .switch input {
            display: none;
        }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }
    </style>

<script>
    function switchIsEmployee() {
        if ($('#IsTcsEmployee').prop('checked')) {
            $('#IsTcsEmployee').prop('checked', false);
        } else {
            $('#IsTcsEmployee').prop('checked', true);
        }
    }
    window.onload = function () {
        (function ($) {
            

            function addFile() {
                var formData = new FormData();
                formData.append('image', $('input[type=file]')[0].files[0]);
                var token = $('input[name="__RequestVerificationToken"]').val();
                var headers = {};
                headers['__RequestVerificationToken'] = token;
                $.ajax({
                    type: "POST",
                    url: '/File/Add',
                    headers: headers,
                    data: formData,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    success: function (response) {

                    },
                    error: function (error) {
                        //Error is good enough because the result is always empty
                        updatelist();
                    }

                });
            }
            function deleteFile(filename) {
                var formData = new FormData();
                $.ajax({
                    type: "POST",
                    url: '/File/Delete',
                    data: "filename=" + filename,
                    success: function (response) {
                        updatelist();
                    },
                    error: function (error) {
                        updatelist();
                    }

                });
            }

            function buildFileList(filelist) {

                $("#fileListDiv").empty();
                for (i = 0; i < filelist.length; i++) {
                    $("#fileListDiv").append("<p id='file_" + filelist[i] + "'>" +
                        "<i class='material-icons'>insert_drive_file</i>" +
                        "<span style='font-size:18px;'>" + filelist[i].FileName + "</span>" +
                        "<i class='delete-file material-icons' style='cursor:pointer' data-file='" + filelist[i].FileName + "'>delete</i>" +
                        "</p>");
                }
            }

            function updatelist() {
                $.ajax({
                    type: "POST",
                    url: '/File/ListCurrentFiles',
                    dataType: 'json',
                    success: function (response) {
                        buildFileList(response);
                    },
                    error: function (error) {
                    }
                });
            }
            $(document).ready(function () {
                $("#buttonnewprofile").click(function (evt) {
                    alertify.set('notifier', 'position', 'bottom-left');
                    var emailCandidate = $("#Email").val();
                    var positionId = $("#Position_Id").val();
                    $.ajax({
                        type: "POST",
                        url: '/Candidate/ValidEmail',
                        dataType: 'json',
                        data: {
                            emailCandidate: emailCandidate,
                            positionId: positionId
                        },
                        success: function (response) {
                            evt.preventDefault();
                            var $form = $('#formnewprofile');
                            if ($form.valid()) {
                                $form.submit();
                                setTimeout(function () {alertify.success('<b>Profile has been Added</b>');}, 2500);
                                setTimeout(function () { window.location.pathname = "Positions/Details/@Model.Position_Id"; }, 4750);
                            } else {
                                return;
                            }
                        },
                        error: function (error) {
                            alertify.error("<b>A profile with the specified email address cannot be registered.</b>");
                        }
                    });
                });
                $("#Files").on("change", function () {
                    addFile();
                });
                $("#fileListDiv").on("click", ".delete-file", function () {
                    deleteFile($(this).attr('data-file'));
                });
            });
        }(jQuery));
    }
</script>