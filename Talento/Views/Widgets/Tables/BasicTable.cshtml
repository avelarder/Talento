@model Talento.Models.DashBoardViewModel
@using PagedList.Mvc;
@{
    ViewBag.Title = "Widgets";
    ViewBag.BodyClass = "dashboard-home";
}
@using (Html.BeginForm("Index", "Dashboard", FormMethod.Get))
{
        <div class="form-group col-sm-2">
            <label for="FilterBy" class="control-label">Filter By:</label>
            @Html.DropDownList("FilterBy", new List<SelectListItem>
                {
                        new SelectListItem() {Text = "Status", Value="Status"},
                        new SelectListItem() {Text = "Title", Value="Title"},
                        new SelectListItem() {Text = "Owner", Value="Owner"},
                        new SelectListItem() {Text = "EM", Value="EM"},
                        new SelectListItem() {Text = "PM", Value="PM"},
                }, new { @class = "form-control" })
        </div>

        <div class="form-group col-sm-4">
            <label for="searchString" class="control-label">Filter:</label>
            @Html.TextBox("searchString", ViewBag.CurrentFilter as string, new { @class = "form-control" })
        </div>
    <div class="form-group">
        <hr />
        <input type="submit" class="btn pmd-ripple-effect btn-primary" value="Search" style="margin-top: 4px" />
    </div>
}
<table class="table pmd-table table-hover table-striped display responsive nowrap" cellspacing="0" style="width:100%">
    <tr>
        <th>
            @Html.ActionLink("Date", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Id", "Index", new { sortOrder = ViewBag.IdSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Title", "Index", new { sortOrder = ViewBag.TitleSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Status", "Index", new { sortOrder = ViewBag.StatusSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            Engagement Manager
            @*@Html.ActionLink("EM", "Index", new { sortOrder = ViewBag.EMSortParm, currentFilter = ViewBag.CurrentFilter })*@
        </th>
        <th>
            Portfolio Manager
            @*@Html.ActionLink("EM", "Index", new { sortOrder = ViewBag.EMSortParm, currentFilter = ViewBag.CurrentFilter })*@
        </th>
        <th>
            Area
            @*@Html.ActionLink("Area", "Index", new { sortOrder = ViewBag.OwnerSortParm, currentFilter = ViewBag.CurrentFilter })*@
        </th>
        <th>
            Created By
            @*@Html.ActionLink("Owner", "Index", new { sortOrder = ViewBag.OwnerSortParm, currentFilter = ViewBag.CurrentFilter })*@
        </th>
        <th>
            Open Days
            @*@Html.ActionLink("Open Days", "Index", new { sortOrder = ViewBag.OwnerSortParm, currentFilter = ViewBag.CurrentFilter })*@
        </th>
        <th>
            Profile Options
        </th>
    </tr>
    @foreach (var p in Model.Positions)
    {
        <tr>
            <td>
                @p.CreationDate
            </td>
            <td>
                @Html.ActionLink(@p.Id.ToString(), "Details", "Positions", new { id = p.Id }, null)
            </td>
            <td>
                @Html.ActionLink(@p.Title.ToString(), "Details", "Positions", new { id = p.Id }, null)
            </td>
            <td>
                @p.Status.ToString()
            </td>
            <td>
                @p.EngagementManager
            </td>
            <td>
                @p.PortfolioManager.UserName
            </td>
            <td>
                @p.Area
            </td>
            <td>
                @p.Owner.UserName
            </td>
            <td>
                @p.OpenDays
            </td>
            <td>
                @if (p.Status == Talento.Entities.Status.Open)
                {
                    <input data-target="#complete-dialog" data-toggle="modal"
                           class="btn-modal btn btn-primary pmd-ripple-effect btn-primary pmd-z-depth"
                           name="position-@p.Id"
                           style="width:20px" value="Add" />
                }
            </td>
        </tr>
    }
</table>

<div tabindex="-1" class="modal fade" id="complete-dialog" style="display: none;" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="formnewprofile" action="/Candidate/Create/" method="post">
                <div class="modal-body">
                    <h4>Attaching a new Profile to </h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        <input data-val="true" data-val-number="The field Id must be a number." data-val-required="The Id field is required." id="Position_Id" name="Position_Id" type="hidden" />
                        <div class="form-group">
                            <label class="control-label col-md-2" for="Name">Name </label>
                            <div class="col-md-10">
                                <input class="form-control text-box single-line" data-val="true" data-val-required="Name is required" id="Name" name="Name" type="text" />
                                <span class="field-validation-valid text-danger" data-valmsg-for="Name" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2" for="Email">Email </label>
                            <div class="col-md-10">
                                <input class="form-control text-box single-line" data-val="true" data-val-required="Email is required" id="Email" name="Email" type="text" />
                                <span class="field-validation-valid text-danger" data-valmsg-for="Email" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2" for="IsTcsEmployee">Is Tcs Employee? </label>
                            <div class="col-md-10">
                                <input class="form-control text-box single-line" data-val="true" id="IsTcsEmployee" name="IsTcsEmployee" type="checkbox" />
                                <span class="field-validation-valid text-danger" data-valmsg-for="IsTcsEmployee" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2" for="Competencies">Competencies </label>
                            <div class="col-md-10">
                                <input class="form-control text-box single-line" data-val="true" data-val-maxlength="The field Competencies must be a string" data-val-required="Competencies is required" id="Competencies" name="Competencies" type="text" />
                                <span class="field-validation-valid text-danger" data-valmsg-for="Competencies" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2" for="Description">Description </label>
                            <div class="col-md-10">
                                <input class="form-control text-box single-line" data-val="true" data-val-maxlength="The field Description must be a string" data-val-required="Description is required" id="Description" name="Description" type="text" />
                                <span class="field-validation-valid text-danger" data-valmsg-for="Description" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2" for="LocalFiles">Local Files </label>
                            <div class="col-md-10">

                                @Html.Action("Index", "File", null)

                            </div>
                        </div>
                    </div>
                </div>
                <div class="pmd-modal-action pmd-modal-bordered text-right">
                    <button data-dismiss="modal" class="btn pmd-btn-flat pmd-ripple-effect btn-primary" type="button">Cancel</button>
                    <input  data-dismiss="modal" id="buttonnewprofile" type="button" class="btn pmd-btn-flat pmd-ripple-effect btn-default" value="Confirm"/>
                </div>
            </form>
        </div>
    </div>
</div>

@Html.PagedListPager(Model.Positions, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))

<script>
    window.onload = function () {
        (function ($) {
           
            function addFile() {
                var formData = new FormData();
                formData.append('image', $('input[type=file]')[0].files[0]);
                var token = $('input[name="__RequestVerificationToken"]').val();
                var headers = {};
                headers['__RequestVerificationToken'] = token;
                $.ajax({
                    type: "POST",
                    url: '/File/Add',
                    headers: headers,
                    data: formData,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    success: function (response) {

                    },
                    error: function (error) {
                        //Error is good enough because the result is always empty
                        updatelist();
                    }

                });
            }
            function deleteFile(filename) {
                var formData = new FormData();
                $.ajax({
                    type: "POST",
                    url: '/File/Delete',
                    data: "filename=" + filename,
                    success: function (response) {
                        updatelist();
                    },
                    error: function (error) {
                        updatelist();
                    }
                    
                });
            }

            function buildFileList(filelist) {

                $("#fileListDiv").empty();
                for (i = 0; i < filelist.length; i++) {
                    $("#fileListDiv").append("<p id='file_" + filelist[i] + "'>" +
                        "<i class='material-icons'>insert_drive_file</i>" +
                        "<span>" + filelist[i].FileName + "</span>" +
                        "<i class='delete-file material-icons' style='cursor:pointer' data-file='" + filelist[i].FileName + "'>delete</i>" +
                        "</p>");
                }
            }

            $('#complete-dialog').on('hidden.bs.modal', function () {
                $("body").removeClass("modal-open");
                $.ajax({
                    type: "POST",
                    url: '/File/EmptyList',
                    dataType: 'json',
                    success: function (response) {
                        buildFileList(response);
                    },
                    error: function (error) {
                    }
                });
                buildFileList();
                setTimeout(stopUpdate, 2000);
            });

            function updatelist() {
                    $.ajax({
                        type: "POST",
                        url: '/File/ListCurrentFiles',
                        dataType: 'json',
                        success: function (response) {
                            buildFileList(response);
                        },
                        error: function (error) {
                        }
                    });
            }
            $(document).ready(function () {
                $(".btn-modal").on("click", function () {
                    $("#Position_Id").val(($(this).attr("name")).split("-")[1]);
                    $("#formnewprofile")[0].reset();
                    $(".field-validation-error").hide();
                });
                $("#buttonnewprofile").click(function (evt) {
                    evt.preventDefault();
                    var $form = $('#formnewprofile');
                    if ($form.valid()) {
                        $form.submit();
                        $("#complete-dialog").modal("hide");
                        toastr.options = {
                            "debug": false,
                            "positionClass": "toast-top-center",
                            "onclick": null,
                            "fadeIn": 500,
                            "fadeOut": 2000,
                            "timeOut": 6000,
                            "extendedTimeOut": 2000
                        }
                        toastr.success("Profile has been added.");
                    } else {
                        return;
                    }
                });
                $("#Files").on("change", function () {
                    addFile();
                });
                $("#fileListDiv").on("click", ".delete-file", function () {
                    deleteFile($(this).attr('data-file'));
                });
            });
        }(jQuery));
    }
</script>
